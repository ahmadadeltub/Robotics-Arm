#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include <MeMegaPi.h>

Servo servo_7_2;
MePort port_7(7);
Servo servo_7_1;
Servo servo_8_1;
MePort port_8(8);


//Encoder Motor
MeEncoderOnBoard Encoder_1(SLOT1);
MeEncoderOnBoard Encoder_2(SLOT2);
MeEncoderOnBoard Encoder_3(SLOT3);
MeEncoderOnBoard Encoder_4(SLOT4);

void isr_process_encoder1(void)
{
      if(digitalRead(Encoder_1.getPortB()) == 0){
            Encoder_1.pulsePosMinus();
      }else{
            Encoder_1.pulsePosPlus();
      }
}

void isr_process_encoder2(void)
{
      if(digitalRead(Encoder_2.getPortB()) == 0){
            Encoder_2.pulsePosMinus();
      }else{
            Encoder_2.pulsePosPlus();
      }
}

void isr_process_encoder3(void)
{
      if(digitalRead(Encoder_3.getPortB()) == 0){
            Encoder_3.pulsePosMinus();
      }else{
            Encoder_3.pulsePosPlus();
      }
}

void isr_process_encoder4(void)
{
      if(digitalRead(Encoder_4.getPortB()) == 0){
            Encoder_4.pulsePosMinus();
      }else{
            Encoder_4.pulsePosPlus();
      }
}

void move(int direction, int speed)
{
      int leftSpeed = 0;
      int rightSpeed = 0;
      if(direction == 1){
            leftSpeed = -speed;
            rightSpeed = speed;
      }else if(direction == 2){
            leftSpeed = speed;
            rightSpeed = -speed;
      }else if(direction == 3){
            leftSpeed = speed;
            rightSpeed = speed;
      }else if(direction == 4){
            leftSpeed = -speed;
            rightSpeed = -speed;
      }
      Encoder_1.setTarPWM(rightSpeed);
      Encoder_2.setTarPWM(leftSpeed);
}
void moveDegrees(int direction,long degrees, int speed_temp)
{
      speed_temp = abs(speed_temp);
      if(direction == 1)
      {
            Encoder_1.move(degrees,(float)speed_temp);
            Encoder_2.move(-degrees,(float)speed_temp);
      }
      else if(direction == 2)
      {
            Encoder_1.move(-degrees,(float)speed_temp);
            Encoder_2.move(degrees,(float)speed_temp);
      }
      else if(direction == 3)
      {
            Encoder_1.move(degrees,(float)speed_temp);
            Encoder_2.move(degrees,(float)speed_temp);
      }
      else if(direction == 4)
      {
            Encoder_1.move(-degrees,(float)speed_temp);
            Encoder_2.move(-degrees,(float)speed_temp);
      }
}

double angle_rad = PI/180.0;
double angle_deg = 180.0/PI;

void armup() {
  servo_7_2.attach(port_7.pin2());
    servo_7_2.write(35);
}
void armdown() {
  servo_7_2.attach(port_7.pin2());
    servo_7_2.write(5);
}

void unclamp() {
     servo_7_1.attach(port_7.pin1());
    servo_8_1.attach(port_8.pin1());
        servo_8_1.write(0);  // Unclamp position
    servo_7_1.write(125); // Unclamp position
 
}

void clamp() {
      servo_7_1.attach(port_7.pin1());
    servo_8_1.attach(port_8.pin1());
        servo_8_1.write(125); // Clamp position
    servo_7_1.write(0);  // Clamp position
 
}

void setup() {
    //Set Pwm 8KHz
    TCCR1A = _BV(WGM10);
    TCCR1B = _BV(CS11) | _BV(WGM12);
    TCCR2A = _BV(WGM21) | _BV(WGM20);
    TCCR2B = _BV(CS21);
    attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);
    attachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);
    Encoder_1.setPulse(8);
    Encoder_2.setPulse(8);
    Encoder_1.setRatio(46.67);
    Encoder_2.setRatio(46.67);
    Encoder_1.setPosPid(1.8,0,1.2);
    Encoder_2.setPosPid(1.8,0,1.2);
    Encoder_1.setSpeedPid(0.18,0,0);
    Encoder_2.setSpeedPid(0.18,0,0);
   
    

//////////Robot Steps //////////

    moveDegrees(1,1200,150);// Forward
    _delay(1);
     moveDegrees(2,1200,150);// BACKWARD
    _delay(1);
     moveDegrees(3,1200,150);// RIGHT
    _delay(1);
    moveDegrees(2,1200,150);// LEFT
    _delay(1);

clamp();//clamp
delay(2000);

unclamp();//Unclamp
delay(2000);

armup();//Arm UP
delay(2000);

armdown();//Arm Down
delay(2000);


   

}

void loop() {
    Encoder_1.loop();
    Encoder_2.loop();
     if (Encoder_1.isTarPosReached() && Encoder_2.isTarPosReached()) {
        // Stop the motors
        Encoder_1.setTarPWM(0);
        Encoder_2.setTarPWM(0);



    }
    
    
}




void _delay(float seconds) {
    long endTime = millis() + seconds * 1000;
    while (millis() < endTime) _loop();
}

void _loop() {
   
    // ... (add other loop-related tasks if needed)
}
